jQuery.fn.beforeAfter = function (options) {
  var defaults = {
    movable: true,
    position: 50,
    separatorColor: "#ffffff",
    bulletColor: "#ffffff",
    arrowColor: "#333333",
  };
  var settings = jQuery.extend({}, defaults, options);

  return this.each(function () {
    var container = $(this);
    var before = container.children().eq(0);
    var after = container.children().eq(1);

    // Setup basic structure
    container.css({ position: "relative", overflow: "hidden" });
    before.css({ position: "relative", width: "100%" });
    after.css({
      position: "absolute",
      top: 0,
      right: 0,
      width: "100%",
      height: "100%",
    });

    // Create slider
    var slider = $("<div>")
      .css({
        position: "absolute",
        top: 0,
        bottom: 0,
        left: settings.position + "%",
        width: "4px",
        background: settings.separatorColor,
        cursor: "ew-resize",
      })
      .appendTo(container);

    // Create handle with drag symbol
    var handle = $("<div>")
      .css({
        position: "absolute",
        top: "50%",
        left: "50%",
        width: "40px",
        height: "40px",
        borderRadius: "50%",
        background: settings.bulletColor,
        transform: "translate(-50%, -50%)",
        cursor: "ew-resize",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
      })
      .appendTo(slider);

    // Add drag symbol to handle
    var dragSymbol = $("<div>")
      .css({
        width: "20px",
        height: "20px",
        position: "relative",
      })
      .appendTo(handle);

    // Create drag icon using pseudo-elements
    dragSymbol.append(
      $("<style>").text(`
            #${container.attr("id")} .drag-symbol::before,
            #${container.attr("id")} .drag-symbol::after {
                content: '';
                position: absolute;
                top: 50%;
                width: 2px;
                height: 20px;
                background: ${settings.arrowColor};
                transform: translateY(-50%);
            }
            #${container.attr("id")} .drag-symbol::before {
                left: 6px;
            }
            #${container.attr("id")} .drag-symbol::after {
                right: 6px;
            }
        `)
    );
    dragSymbol.addClass("drag-symbol");

    // Touch and mouse event handling
    var moveSlider = function (clientX) {
      var containerWidth = container.width();
      var containerOffset = container.offset().left;
      var position = ((clientX - containerOffset) / containerWidth) * 100;
      position = Math.max(0, Math.min(100, position));

      slider.css("left", position + "%");
      after.css("width", 100 - position + "%");
    };

    var startMove = function (e) {
      e.preventDefault();
      $(document).on("mousemove touchmove", move);
      $(document).on("mouseup touchend", stopMove);
    };

    var move = function (e) {
      var clientX =
        e.clientX ||
        (e.originalEvent.touches && e.originalEvent.touches[0].clientX);
      moveSlider(clientX);
    };

    var stopMove = function () {
      $(document).off("mousemove touchmove", move);
      $(document).off("mouseup touchend", stopMove);
    };

    if (settings.movable) {
      slider.on("mousedown touchstart", startMove);
    }

    // Initial position
    moveSlider(
      container.offset().left + container.width() * (settings.position / 100)
    );
  });
};
